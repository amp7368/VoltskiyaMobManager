plugins {
    id 'java'
    id 'maven-publish'
    id 'io.github.patrick.remapper' version "1.3.0"
}

repositories {
    maven { url "https://reposilite.appleptr16.com/appleptr16" }
    maven { url 'https://papermc.io/repo/repository/maven-public/' }
    maven { url 'https://repo.aikar.co/content/groups/aikar/' }
    mavenCentral()
    mavenLocal()
    maven {
        name 'CodeMC'
        url 'https://repo.codemc.org/repository/maven-public/'
    }
}


java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

project.group groupValue
project.version versionValue

def remappedArchiveFile() {
    return jar.getDestinationDirectory().file("${project.getName()}-${project.getVersion()}-remapped.jar")
}

publishing {
    repositories {
        maven {
            name 'appleptr16Repo'
            url 'https://reposilite.appleptr16.com/appleptr16'
            credentials(PasswordCredentials)
        }
    }
    publications {
        maven(MavenPublication) {
            setGroup groupValue
            setVersion versionValue
            artifact(remappedArchiveFile()) {
                classifier = 'remapped'
                extension = 'jar'
            }
            artifact(jar.getArchiveFile()) {
                classifier = ''
                extension = 'jar'
            }
        }
    }
}
configurations {
    configureEach {
        resolutionStrategy.cacheDynamicVersionsFor 1, 'seconds'
        resolutionStrategy.cacheChangingModulesFor 1, 'seconds'
    }
}

dependencies {
    compileOnly 'mc.pmc:voltpluginmanager:3.2-SNAPSHOT'
    compileOnly 'mc.apple:AppleMCUtil:1.0-SNAPSHOT'
    compileOnly 'mc.nms:DecodingNms:1.19.4-2.0-SNAPSHOT'
    compileOnly 'voltskiya.utilities:VoltskiyaUtilities:2.0-SNAPSHOT'

    compileOnly 'org.spigotmc:spigot:1.19.4-R0.1-SNAPSHOT:remapped-mojang'
    compileOnly 'io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT'
}
remap {
    version.set '1.19.4'
    dependsOn(jar)
    archiveClassifier.set("remapped")
    doLast {
        copy {
            from remappedArchiveFile()
            into file(serverBuildDir)
        }
    }
}
task publishAndBuild {
    dependsOn(remap)
    dependsOn(publishAllPublicationsToAppleptr16RepoRepository)
    tasks.publishAllPublicationsToAppleptr16RepoRepository.mustRunAfter(remap)
}